{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1eZoIovBb35iXqEOL09nMJuZMDN-ZrwXR","timestamp":1695640256635}],"gpuType":"T4","mount_file_id":"1eZoIovBb35iXqEOL09nMJuZMDN-ZrwXR","authorship_tag":"ABX9TyO5hsHnDdGWRyMGyGkv0DuN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## Prepare groundtruth image for finetuning"],"metadata":{"id":"k7ROL8-GdIBn"}},{"cell_type":"markdown","source":["참고: https://github.com/danielgatis/rembg/issues/193#issuecomment-1055534289"],"metadata":{"id":"WX6O88UIgfB7"}},{"cell_type":"code","source":["#when using google colab, run this code\n","\"\"\"\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I5Qc0_M1gdTp","executionInfo":{"status":"ok","timestamp":1695640170923,"user_tz":-540,"elapsed":3743,"user":{"displayName":"김혜연","userId":"14076391861970698514"}},"outputId":"7f9c5b54-2da6-4bc4-a422-781face0be96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import os\n","os.chdir('/content/drive/MyDrive/U-2-Net-master')"],"metadata":{"id":"-b7_6DFkfsDS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["1. prepare training dataset(background-removed picture to mask)\n","배경=0, 물체=1"],"metadata":{"id":"ZYBMWUrZoRMM"}},{"cell_type":"markdown","source":[],"metadata":{"id":"Sg7RP0JIyu3j"}},{"cell_type":"code","source":["import cv2\n","import numpy as np\n","from google.colab.patches import cv2_imshow\n","\n","# Load the background-removed image\n","\n","removed_img_names = sorted(os.listdir(\"backgroundremoved/\")) #to get the name of each \"background-removed\" images for the masks\n","\n","\n","removed_path = \"backgroundremoved/\"\n","removed_images_path = os.listdir(removed_path)\n","removed_files = [removed for removed in removed_images_path if removed.lower().endswith((\".jpg\", \".png\", \".jpeg\", \".gif\"))]\n","\n","for i,removed in enumerate(removed_files):\n","  removed_path = os.path.join(removed_path, removed)\n","  # Check if the image has an alpha channel (transparency)\n","  removed_image = cv2.imread(removed_path, cv2.IMREAD_UNCHANGED)\n","\n","  if removed_image.shape[2] == 4:\n","      # Extract the alpha channel (transparency channel)\n","      alpha_channel = removed_image[:, :, 3]\n","\n","      # Thresholding to create a binary mask (adjust the threshold value as needed)\n","      threshold_value = 128\n","      binary_mask = (alpha_channel > threshold_value).astype(np.uint8)\n","\n","\n","      # Save the binary mask as an image\n","      # Use glob to get a list of image files in the directory (supports pattern matching)\n","      image_file_path = os.path.join(\"finetune_data/finetune_groundtruth\", removed_img_names[i])  # You can adjust the file extension as needed\n","\n","\n","      cv2.imwrite(image_file_path, binary_mask * 255)\n","\n","      # Display or use the binary mask as needed\n","      #cv2_imshow( binary_mask * 255)\n","      #cv2.waitKey(0)\n","      #cv2.destroyAllWindows()\n","\n","  else:\n","      print(\"The input image does not have an alpha channel (transparency).\")\n","\n","  #save to finetune_groundtruth folder!\n"],"metadata":{"id":"m7Ynv1n0oXGc"},"execution_count":null,"outputs":[]}]}